# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

image: node:latest

variables:
  REDDIT_SECRET: "$REDDIT_SECRET"
  CLIENT_ID: "$CLIENT_ID"
  REFRESH_TOKEN: "$REFRESH_TOKEN"
  TWITTER_KEY: "$TWITTER_KEY"

stages: # List of stages for jobs, and their order of execution
  - check
  - test
  - staging
  - production

services:
  - mongo:latest

lint frontend: # esLint is run on the frontend
  stage: check
  script:
    - cd ./frontend
    - npm install --legacy-peer-deps
    - npm run lint
  allow_failure: false

testing frontend: # Jest is used along with the React Testing Library
  stage: test
  script:
    - echo 'Beginning test...'
    - cd ./frontend
    - npm install --legacy-peer-deps
    - npm run test
    - echo 'Test completed.'
    - echo 'Providing code coverage for frontend.'
    - npm run coverage
  allow_failure: false

lint backend: # esLint is run on the backend
  stage: check
  script:
    - cd ./backend
    - npm install
    - npm run lint
  allow_failure: false

testing backend: # Mocha is used along with Chai
  stage: test
  script:
    - echo 'Beginning test...'
    - cd ./backend
    - npm install
    - npm run test
    - echo 'Test completed.'
    - echo 'Providing coverage for backend.'
    - npm run coverage
  allow_failure: false

build-staging-frontend:
  stage: staging
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug # GitLab recommends using the debug version of kaniko
    entrypoint: [""] # The entrypoint needs to be overridden, for the build script to run

  # The script that will be run to build the docker image. We don't have to change much here if you all followed the lab setup
  # The dollar sign values are predefined environment variables that are set by GitLab
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/frontend"
      --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/frontend:staging"
  allow_failure: false
  dependencies: []

  # The rules for when this job will run.
  # We only want this job to run when we push to the staging branch otherwise we never run this
  # Once the job is completed, the docker images will be pushed to the gitlab registry which can be found
  # under Packages & Registries -> Container Registry: https://gitlab.socs.uoguelph.ca/3760W23/demogroup/three_container_stack/container_registry/
  rules:
    - if: $CI_COMMIT_BRANCH == "staging" && $CI_PIPELINE_SOURCE == "push"
      when: always
    - when: never

# Similar to the frontend job, we will be building the backend docker image
build-staging-backend:
  stage: staging
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/backend:staging"
  allow_failure: false
  dependencies: []
  rules:
    - if: $CI_COMMIT_BRANCH == "staging" && $CI_PIPELINE_SOURCE == "push"
      when: always
    - when: never

build-staging-mongo:
  stage: staging
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/mongodb"
      --dockerfile "${CI_PROJECT_DIR}/mongodb/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/mongo:staging"
  allow_failure: false
  dependencies: []
  rules:
    - if: $CI_COMMIT_BRANCH == "staging" && $CI_PIPELINE_SOURCE == "push"
      when: always
    - when: never

# We will create a similar setup for a production branch
build-production-frontend:
  stage: production
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/frontend"
      --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/frontend:production"
  allow_failure: false
  dependencies: []
  rules:
    - if: $CI_COMMIT_BRANCH == "production" && $CI_PIPELINE_SOURCE == "push"
      when: always
    - when: never

build-production-backend:
  stage: production
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/backend:production"
  allow_failure: false
  dependencies: []
  # https://docs.gitlab.com/ee/ci/jobs/job_control.html#avoid-duplicate-pipelines
  rules:
    - if: $CI_COMMIT_BRANCH == "production" && $CI_PIPELINE_SOURCE == "push"
      when: always
    - when: never

build-production-mongo:
  stage: production
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/mongodb"
      --dockerfile "${CI_PROJECT_DIR}/mongodb/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/mongo:production"
  allow_failure: false
  dependencies: []
  rules:
    - if: $CI_COMMIT_BRANCH == "production" && $CI_PIPELINE_SOURCE == "push"
      when: always
    - when: never
